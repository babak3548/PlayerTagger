import "oaidl.idl";
import "ocidl.idl";
import "ModuleConfig.idl";		

cpp_quote("//////////////////////////////////////////////////////////////////////////")
cpp_quote("//")
cpp_quote("//	original file name: ModuleConfigForVB.idl")
cpp_quote("//")
cpp_quote("//////////////////////////////////////////////////////////////////////////")
cpp_quote("//")
cpp_quote("//")
cpp_quote("//	purpose: ModuleConfigForVB interfaces definitions")
cpp_quote("//")
cpp_quote("//////////////////////////////////////////////////////////////////////////")
cpp_quote("")
cpp_quote("")
cpp_quote("// {D211F479-B5F2-469f-9EB9-F0CD7EB202D9}")
cpp_quote("DEFINE_GUID(IID_IModuleConfigForVB, 0xD211F479, 0xB5F2, 0x469f, 0x9E, 0xB9, 0xF0, 0xCD, 0x7E, 0xB2, 0x02, 0xD9);")
cpp_quote("")

[
    object,
    local,
    uuid(D211F479-B5F2-469f-9EB9-F0CD7EB202D9),
    pointer_default(unique)
]

interface IModuleConfigForVB: IUnknown
{
    [helpstring("method SetValueVB assigns the new value to the module parameter identified by pParamID unique identifier, it should be verified and applied to the inside state of module by the call to CommitChanges")]
		HRESULT SetValueVB([in] BSTR pParamID, [in]  const VARIANT* pValue);

    [helpstring("method GetValueVB retrieves the value of the module parameter identified by pParamID unique identifier")]
		HRESULT GetValueVB([in] BSTR pParamID, [out] VARIANT* pValue);

    [helpstring("method GetParamConfigVB retrieves the pointer to the interface of the module parameter identified by pParamID unique identifier")]
		HRESULT GetParamConfigVB([in] BSTR pParamID, [out] VARIANT*  pValue);

    [helpstring("method IsSupportedVB clarifies whether the parameter identified by pParamID is valuable for this module or no.")]
		HRESULT IsSupportedVB([in] BSTR pParamID);

    [helpstring("method SetDefStateVB resets all parameters of the module to its default values")]
		HRESULT SetDefStateVB(void);

    [helpstring("method EnumParamsVB retrieves the list of parameters that are valid for this module")]
		HRESULT EnumParamsVB([in][out] long* pNumParams, [in][out] GUID* pParamIDs);

    [helpstring("method CommitChangesVB verifies and applies changes of parameters to the internal state of the module")]
		HRESULT CommitChangesVB([out] VARIANT* pReason);

    [helpstring("method DeclineChangesVB declines all unverified and don't applied changes of module parameters that have been made since the last call to CommitChanges and sets module to its previous committed state")]
		HRESULT DeclineChangesVB(void);

    [helpstring("method SaveToRegistryVB saves to the registry the internal module state that was successfully applied by the last call to CommitChanges")]
		HRESULT SaveToRegistryVB([in] DWORD hKeyRoot, [in] const BSTR pszKeyName, [in] const BOOL bPreferReadable);

    [helpstring("method LoadFromRegistryVB loads from the registry module parameters that should be verified and applied by the call to CommitChanges")]
		HRESULT LoadFromRegistryVB([in] DWORD hKeyRoot, [in] const BSTR pszKeyName, [in] const BOOL bPreferReadable);

    [helpstring("method RegisterForNotifiesVB registers the client for getting notifies occurred inside the module")]
		HRESULT RegisterForNotifiesVB([in] IModuleCallback* pModuleCallback);

    [helpstring("method UnregisterFromNotifiesVB unregisters the client from getting notifies occurred inside the module")]
		HRESULT UnregisterFromNotifiesVB([in] IModuleCallback* pModuleCallback);

    [helpstring("method ConvertREFTIMEtoREFERENCETIME converts time as double value to a int64 time in 100nanoseconds units")]
		HRESULT ConvertREFTIMEtoREFERENCETIME([in] double dVal,[out] VARIANT* pValue);
}
